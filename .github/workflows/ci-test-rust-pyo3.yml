name: reusable_unittests_rust_pyo3

on:
  workflow_dispatch:
    inputs:
      windows:
        description: "Run unittests on windows"
        required: false
        default: false
        type: boolean
      macos:
        description: "Run unittests on macOS"
        required: false
        default: true
        type: boolean
      test_code_coverage:
        description: "Is the code coverage tested to be over 90 percent of lines"
        required: false
        default: true
        type: boolean
      rust_package_name:
        description: "Name of the pure rust package"
        required: true
        type: string
      python_3_12:
        description: "Run unittest on Python 3.12"
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      windows:
        description: "Run unittests on windows"
        required: false
        default: false
        type: boolean
      macos:
        description: "Run unittests on macOS"
        required: false
        default: true
        type: boolean
      test_code_coverage:
        description: "Is the code coverage tested to be over 90 percent of lines"
        required: false
        default: true
        type: boolean
      rust_package_name:
        description: "Name of the pure rust package"
        required: true
        type: string
      python_3_12:
        description: "Run unittest on Python 3.12"
        required: false
        default: true
        type: boolean

jobs:

  unittests_check_windows:
    if: ${{ inputs.windows }}
    name: unittests-windows-${{ matrix.python.interpreter }}
    runs-on: "windows-latest"
    strategy:
      matrix:
        python: [
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"},
            {py: '3.11', interpreter: "python3.11"},
            # {py: '3.12', interpreter: "python3.12"},
        ]
    steps:
      - uses: actions/checkout@v3
      # - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked
  
  unittests_check_windows_py312:
    if: ${{ inputs.windows && inputs.python_3_12 }}
    name: unittests-windows-python3.12
    runs-on: "windows-latest"
    steps:
      - uses: actions/checkout@v3
      # - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked

  unittests_check_macos:
    if: ${{ inputs.macos }}
    name: unittests-macos-${{ matrix.python.interpreter }}
    runs-on: "macOS-13"
    strategy:
      matrix:
        python: [
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"},
            {py: '3.11', interpreter: "python3.11"},
            # {py: '3.12', interpreter: "python3.12"},
        ]
    steps:
      - uses: actions/checkout@v3
      # - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked
  
  unittests_check_macos_py312:
    if: ${{ inputs.macos && inputs.python_3_12 }}
    name: unittests-macos-python3.12
    runs-on: "macOS-13"
    steps:
      - uses: actions/checkout@v3
      # - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked
  
  unittests_check_linux:
    name: unittests-linux-${{ matrix.python.interpreter }}
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python: [
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"},
            {py: '3.11', interpreter: "python3.11"},
            # {py: '3.12', interpreter: "python3.12"},
        ]
    steps:
      - uses: actions/checkout@v3
      # - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          components: rustfmt
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked
          cargo fmt --all -- --check
  
  unittests_check_linux_py312:
    name: unittests-linux-python3.12
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      # - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          components: rustfmt
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked
          cargo fmt --all -- --check

  doctest_check:
    name: unittests_check-ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          default: true
      - run: |
          cargo test --doc --package=${{inputs.rust_package_name}}

  code_coverage_roqoqo:
    if: ${{inputs.test_code_coverage}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
            profile: minimal
            toolchain: stable
            components: llvm-tools-preview
            override: true
      - uses: taiki-e/install-action@cargo-llvm-cov
      - run: |
          cd ${{inputs.rust_package_name}}
          cargo llvm-cov --no-default-features --lcov --output-path lcov_roqoqo.info --fail-under-lines=90