name: HQS build and deploy for rust pyo3 repos

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:

  deploy_cratesio:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3.1.0
    #- uses: Swatinem/rust-cache@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true
    - name: setup cargo
      run: |
        # Authentication at crates.io with HQS organizational token
        cargo login ${{ secrets.CRATES_IO_API_TOKEN }}
        # publishing a specific package to crates.io
        cargo publish --manifest-path=roqoqo_for_braket_devices/Cargo.toml
        # Wait to publish next package (e.g. the Python interface)
        # that depends on previous package so that crates.io is
        # updated and accepts the upload
        sleep 60
        # Publish second package
        cargo publish --manifest-path=qoqo_for_braket_devices/Cargo.toml

# Build linux wheels and upload them to PyPi
  build_maturin_builds_linux:
    name: maturin_build-linux
    needs: deploy_cratesio
    uses: HQSquantumsimulations/reusable_workflows/.github/workflows/reusable_build_maturin_linux.yml@main
    with: 
      py_interface_folder: "qoqo_for_braket_devices"
      deploy: true
      # Whether to build for aarch64. Can fail if there are C/C++ dependencies
      build_for_arm: true
    secrets: inherit

# Build windows wheels and upload them to PyPi
  build_maturin_builds_windows:
    name: maturin_build-windows
    needs: deploy_cratesio
    uses: HQSquantumsimulations/reusable_workflows/.github/workflows/reusable_build_maturin_windows.yml@main
    with: 
      py_interface_folder: "qoqo_for_braket_devices"
      deploy: true
    secrets: inherit

  build_maturin_builds_macos:
    name: maturin_build-macos-${{ matrix.python.interpreter }}
    runs-on: 'macOS-13'
    strategy:
      matrix:
        python: [
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"},
            {py: '3.11', interpreter: "python3.11"},
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: "aarch64-apple-darwin"
          default: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pytest numpy twine
          python -m pip install maturin
      - name: macos wheels
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" maturin build -i ${{ matrix.python.interpreter }} --out wheels  -m qoqo_for_braket_devices/Cargo.toml --release --locked
      - name: universal wheels
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" maturin build -i ${{ matrix.python.interpreter }} --out wheels  -m qoqo_for_braket_devices/Cargo.toml --release --locked --target x86_64-apple-darwin
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" maturin build -i ${{ matrix.python.interpreter }} --out wheels  -m qoqo_for_braket_devices/Cargo.toml --release --locked --target aarch64-apple-darwin
      - name: store artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheels
    
  deploy_macos:
    needs: build_maturin_builds_macos
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    - uses: actions/download-artifact@v3
      with:
        name: wheels
    - name: Publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m pip install --upgrade pip
        pip install twine
        python -m twine upload --skip-existing *