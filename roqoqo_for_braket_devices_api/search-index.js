var searchIndex = new Map(JSON.parse('[\
["roqoqo_for_braket_devices",{"doc":"roqoqo_for_braket_devices","t":"EEEEECGFPFPFPFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AWSDevice","IonQAria1Device","IonQHarmonyDevice","OQCLucyDevice","RigettiAspenM3Device","devices","AWSDevice","IonQAria1Device","IonQAria1Device","IonQHarmonyDevice","IonQHarmonyDevice","OQCLucyDevice","OQCLucyDevice","RigettiAspenM3Device","RigettiAspenM3Device","__clone_box","__clone_box","__clone_box","__clone_box","add_damping","add_damping","add_damping","add_damping","add_damping","add_dephasing","add_dephasing","add_dephasing","add_dephasing","add_dephasing","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","longest_chains","longest_chains","longest_chains","longest_chains","longest_chains","longest_closed_chains","longest_closed_chains","longest_closed_chains","longest_closed_chains","longest_closed_chains","multi_qubit_gate_names","multi_qubit_gate_names","multi_qubit_gate_names","multi_qubit_gate_names","multi_qubit_gate_names","multi_qubit_gate_time","multi_qubit_gate_time","multi_qubit_gate_time","multi_qubit_gate_time","multi_qubit_gate_time","name","name","name","name","name","new","new","new","new","number_qubits","number_qubits","number_qubits","number_qubits","number_qubits","qubit_decoherence_rates","qubit_decoherence_rates","qubit_decoherence_rates","qubit_decoherence_rates","qubit_decoherence_rates","region","region","region","region","region","serialize","serialize","serialize","serialize","set_single_qubit_gate_time","set_single_qubit_gate_time","set_single_qubit_gate_time","set_single_qubit_gate_time","set_single_qubit_gate_time","set_two_qubit_gate_time","set_two_qubit_gate_time","set_two_qubit_gate_time","set_two_qubit_gate_time","set_two_qubit_gate_time","single_qubit_gate_names","single_qubit_gate_names","single_qubit_gate_names","single_qubit_gate_names","single_qubit_gate_names","single_qubit_gate_time","single_qubit_gate_time","single_qubit_gate_time","single_qubit_gate_time","single_qubit_gate_time","three_qubit_gate_time","three_qubit_gate_time","three_qubit_gate_time","three_qubit_gate_time","three_qubit_gate_time","to_generic_device","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","two_qubit_edges","two_qubit_edges","two_qubit_edges","two_qubit_edges","two_qubit_edges","two_qubit_gate_names","two_qubit_gate_names","two_qubit_gate_names","two_qubit_gate_names","two_qubit_gate_names","two_qubit_gate_time","two_qubit_gate_time","two_qubit_gate_time","two_qubit_gate_time","two_qubit_gate_time","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"roqoqo_for_braket_devices"],[6,"roqoqo_for_braket_devices::devices"],[209,"dyn_clone::sealed"],[210,"roqoqo"],[211,"core::result"],[212,"serde::de"],[213,"core::fmt"],[214,"core::fmt"],[215,"alloc::string"],[216,"core::option"],[217,"ndarray::aliases"],[218,"serde::ser"],[219,"roqoqo::devices::generic_device"],[220,"core::any"]],"d":["","","","","","AWS Devices","Collection of AWS quantum devices.","","","","","","","","","","","","","Adds qubit damping to noise rates.","Adds qubit damping to noise rates.","Adds qubit damping to noise rates.","Adds qubit damping to noise rates.","Adds qubit damping to noise rates.","Adds qubit dephasing to noise rates.","Adds qubit dephasing to noise rates.","Adds qubit dephasing to noise rates.","Adds qubit dephasing to noise rates.","Adds qubit dephasing to noise rates.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Return a list of longest linear chains through the device.","Return a list of longest linear chains through the device.","Return a list of longest linear chains through the device.","Return a list of longest linear chains through the device.","Return a list of longest linear chains through the device.","Return a list of longest closed linear chains through the …","Return a list of longest closed linear chains through the …","Return a list of longest closed linear chains through the …","Return a list of longest closed linear chains through the …","Return a list of longest closed linear chains through the …","Returns the names of a multi qubit operations available on …","Returns the names of a multi qubit operations available on …","Returns the names of a multi qubit operations available on …","Returns the names of a multi qubit operations available on …","Returns the names of a multi qubit operations available on …","Returns the gate time of a multi qubit operation if the …","Returns the gate time of a multi qubit operation if the …","Returns the gate time of a multi qubit operation if the …","Returns the gate time of a multi qubit operation if the …","Returns the gate time of a multi qubit operation if the …","Returns the device’s identifier.","Returns the device’s identifier.","Returns the device’s identifier.","Returns the device’s identifier.","Returns the device’s identifier.","Creates a new IonQHarmonyDevice.","Creates a new IonQAria1Device.","Creates a new OQCLucyDevice.","Creates a new RigettiAspenM3Device.","Returns the number of qubits the device supports.","Returns the number of qubits the device supports.","Returns the number of qubits the device supports.","Returns the number of qubits the device supports.","Returns the number of qubits the device supports.","Returns the matrix of the decoherence rates of the …","Returns the matrix of the decoherence rates of the …","Returns the matrix of the decoherence rates of the …","Returns the matrix of the decoherence rates of the …","Returns the matrix of the decoherence rates of the …","Returns the device’s region.","Returns the device’s region.","Returns the device’s region.","Returns the device’s region.","Returns the device’s region.","","","","","Setting the gate time of a single qubit gate.","Setting the gate time of a single qubit gate.","Setting the gate time of a single qubit gate.","Setting the gate time of a single qubit gate.","Setting the gate time of a single qubit gate.","Setting the gate time of a two qubit gate.","Setting the gate time of a two qubit gate.","Setting the gate time of a two qubit gate.","Setting the gate time of a two qubit gate.","Setting the gate time of a two qubit gate.","Returns the names of a single qubit operations available …","Returns the names of a single qubit operations available …","Returns the names of a single qubit operations available …","Returns the names of a single qubit operations available …","Returns the names of a single qubit operations available …","Returns the gate time of a single qubit operation if the …","Returns the gate time of a single qubit operation if the …","Returns the gate time of a single qubit operation if the …","Returns the gate time of a single qubit operation if the …","Returns the gate time of a single qubit operation if the …","Returns the gate time of a three qubit operation if the …","Returns the gate time of a three qubit operation if the …","Returns the gate time of a three qubit operation if the …","Returns the gate time of a three qubit operation if the …","Returns the gate time of a three qubit operation if the …","Converts the device to a qoqo GenericDevice.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the list of pairs of qubits linked with a native …","Returns the list of pairs of qubits linked with a native …","Returns the list of pairs of qubits linked with a native …","Returns the list of pairs of qubits linked with a native …","Returns the list of pairs of qubits linked with a native …","Returns the names of a two qubit operations available on …","Returns the names of a two qubit operations available on …","Returns the names of a two qubit operations available on …","Returns the names of a two qubit operations available on …","Returns the names of a two qubit operations available on …","Returns the gate time of a two qubit operation if the two …","Returns the gate time of a two qubit operation if the two …","Returns the gate time of a two qubit operation if the two …","Returns the gate time of a two qubit operation if the two …","Returns the gate time of a two qubit operation if the two …","","","","",""],"i":[0,0,0,0,0,0,0,0,3,0,3,0,3,0,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,3,3,3,3,3,3,3,3,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[3,4,5],[[7,[2,6]]]],[[8,4,5],[[7,[2,6]]]],[[9,4,5],[[7,[2,6]]]],[[10,4,5],[[7,[2,6]]]],[[11,4,5],[[7,[2,6]]]],[[3,4,5],[[7,[2,6]]]],[[8,4,5],[[7,[2,6]]]],[[9,4,5],[[7,[2,6]]]],[[10,4,5],[[7,[2,6]]]],[[11,4,5],[[7,[2,6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,8],[9,9],[10,10],[11,11],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],8],[[],9],[[],10],[[],11],[-1,[[7,[8]]],12],[-1,[[7,[9]]],12],[-1,[[7,[10]]],12],[-1,[[7,[11]]],12],[[8,8],13],[[9,9],13],[[10,10],13],[[11,11],13],[[8,14],15],[[9,14],15],[[10,14],15],[[11,14],15],[8,3],[9,3],[-1,-1,[]],[9,3],[11,3],[10,3],[8,3],[11,3],[10,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[3,[[16,[[16,[4]]]]]],[8,[[16,[[16,[4]]]]]],[9,[[16,[[16,[4]]]]]],[10,[[16,[[16,[4]]]]]],[11,[[16,[[16,[4]]]]]],[3,[[16,[[16,[4]]]]]],[8,[[16,[[16,[4]]]]]],[9,[[16,[[16,[4]]]]]],[10,[[16,[[16,[4]]]]]],[11,[[16,[[16,[4]]]]]],[3,[[16,[17]]]],[8,[[16,[17]]]],[9,[[16,[17]]]],[10,[[16,[17]]]],[11,[[16,[17]]]],[[3,18,[19,[4]]],[[20,[5]]]],[[8,18,[19,[4]]],[[20,[5]]]],[[9,18,[19,[4]]],[[20,[5]]]],[[10,18,[19,[4]]],[[20,[5]]]],[[11,18,[19,[4]]],[[20,[5]]]],[3,18],[8,18],[9,18],[10,18],[11,18],[[],8],[[],9],[[],10],[[],11],[3,4],[8,4],[9,4],[10,4],[11,4],[[3,4],[[20,[[21,[5]]]]]],[[8,4],[[20,[[21,[5]]]]]],[[9,4],[[20,[[21,[5]]]]]],[[10,4],[[20,[[21,[5]]]]]],[[11,4],[[20,[[21,[5]]]]]],[3,18],[8,18],[9,18],[10,18],[11,18],[[8,-1],7,22],[[9,-1],7,22],[[10,-1],7,22],[[11,-1],7,22],[[3,18,4,5],[[7,[2,6]]]],[[8,18,4,5],[[7,[2,6]]]],[[9,18,4,5],[[7,[2,6]]]],[[10,18,4,5],[[7,[2,6]]]],[[11,18,4,5],[[7,[2,6]]]],[[3,18,4,4,5],[[7,[2,6]]]],[[8,18,4,4,5],[[7,[2,6]]]],[[9,18,4,4,5],[[7,[2,6]]]],[[10,18,4,4,5],[[7,[2,6]]]],[[11,18,4,4,5],[[7,[2,6]]]],[3,[[16,[17]]]],[8,[[16,[17]]]],[9,[[16,[17]]]],[10,[[16,[17]]]],[11,[[16,[17]]]],[[3,18,4],[[20,[5]]]],[[8,18,4],[[20,[5]]]],[[9,18,4],[[20,[5]]]],[[10,18,4],[[20,[5]]]],[[11,18,4],[[20,[5]]]],[[3,18,4,4,4],[[20,[5]]]],[[8,18,4,4,4],[[20,[5]]]],[[9,18,4,4,4],[[20,[5]]]],[[10,18,4,4,4],[[20,[5]]]],[[11,18,4,4,4],[[20,[5]]]],[3,[[7,[23,6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[3,[[16,[[2,[4,4]]]]]],[8,[[16,[[2,[4,4]]]]]],[9,[[16,[[2,[4,4]]]]]],[10,[[16,[[2,[4,4]]]]]],[11,[[16,[[2,[4,4]]]]]],[3,[[16,[17]]]],[8,[[16,[17]]]],[9,[[16,[17]]]],[10,[[16,[17]]]],[11,[[16,[17]]]],[[3,18,4,4],[[20,[5]]]],[[8,18,4,4],[[20,[5]]]],[[9,18,4,4],[[20,[5]]]],[[10,18,4,4],[[20,[5]]]],[[11,18,4,4],[[20,[5]]]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]]],"c":[],"p":[[5,"Private",209],[1,"tuple"],[6,"AWSDevice",6],[1,"usize"],[1,"f64"],[6,"RoqoqoError",210],[6,"Result",211],[5,"IonQHarmonyDevice",6],[5,"IonQAria1Device",6],[5,"OQCLucyDevice",6],[5,"RigettiAspenM3Device",6],[10,"Deserializer",212],[1,"bool"],[5,"Formatter",213],[8,"Result",213],[5,"Vec",214],[5,"String",215],[1,"str"],[1,"slice"],[6,"Option",216],[8,"Array2",217],[10,"Serializer",218],[5,"GenericDevice",219],[5,"TypeId",220]],"b":[[63,"impl-From%3C%26IonQHarmonyDevice%3E-for-AWSDevice"],[64,"impl-From%3C%26IonQAria1Device%3E-for-AWSDevice"],[66,"impl-From%3CIonQAria1Device%3E-for-AWSDevice"],[67,"impl-From%3CRigettiAspenM3Device%3E-for-AWSDevice"],[68,"impl-From%3C%26OQCLucyDevice%3E-for-AWSDevice"],[69,"impl-From%3CIonQHarmonyDevice%3E-for-AWSDevice"],[70,"impl-From%3C%26RigettiAspenM3Device%3E-for-AWSDevice"],[71,"impl-From%3COQCLucyDevice%3E-for-AWSDevice"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
